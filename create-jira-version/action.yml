name: Create Jira Version

description: 'Creates a Jira version.'

inputs:
    jira-project-key:
        description: 'The key of the Jira project (e.g., SONARIAC). Required if JIRA_PROJECT_KEY env var is not set.'
        required: false
    jira-version-name:
      description: 'The name of the current Jira version. Can also be set via JIRA_VERSION_NAME environment variable. Used to determine the next version if jira-new-version-name is not provided.'
      required: false
    jira-new-version-name:
        description: 'The name of the new Jira version to create (e.g., 1.2.3). If not provided, the next version will be automatically determined by incrementing the current version.'
        required: false
    use-jira-sandbox:
        description: "Use the sandbox server instead of the production Jira. Can also be controlled via USE_JIRA_SANDBOX environment variable."
        required: false

outputs:
    jira-new-version-id:
        description: 'The ID of the created Jira version.'
        value: ${{ steps.run_python_script.outputs.new_version_id }}
    jira-new-version-name:
        description: 'The name of the created Jira version.'
        value: ${{ steps.run_python_script.outputs.new_version_name }}

runs:
  using: "composite"
  steps:
    - name: Get Jira Credentials from Vault
      uses: SonarSource/vault-action-wrapper@v3
      id: secrets
      with:
        secrets: |
          development/kv/data/jira user | JIRA_USER;
          development/kv/data/jira token | JIRA_TOKEN;

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.10'

    - name: Install Dependencies
      shell: bash
      run: pip install -r ${{ github.action_path }}/requirements.txt

    - uses: SonarSource/release-github-actions/get-jira-version@v1
      id: get-jira-version
      if: ${{ !inputs.jira-version-name && !env.JIRA_VERSION_NAME && !inputs.jira-new-version-name }}

    - name: Determine Current Version
      id: determine-current-version
      if: ${{ !inputs.jira-new-version-name }}
      shell: bash
      run: |
        if [[ -n "${{ inputs.jira-version-name || env.JIRA_VERSION_NAME }}" ]]; then
          CURRENT_VERSION="${{ inputs.jira-version-name || env.JIRA_VERSION_NAME }}"
        else
          CURRENT_VERSION="${{ steps.get-jira-version.outputs.jira-version-name }}"
        fi
        echo "current-version-name=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Determine New Jira Version
      id: determine-new-version-name
      shell: bash
      run: |
        if [[ -n "${{ inputs.jira-new-version-name }}" ]]; then
          NEW_VERSION="${{ inputs.jira-new-version-name }}"
        else
          NEW_VERSION=$(echo "${{ steps.determine-current-version.outputs.current-version-name }}" | awk -F. '{$NF+=1; print}' OFS='.')
        fi
        echo "new-version-name=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Create Jira Version
      id: run_python_script
      shell: bash
      env:
        JIRA_USER: ${{ fromJSON(steps.secrets.outputs.vault).JIRA_USER }}
        JIRA_TOKEN: ${{ fromJSON(steps.secrets.outputs.vault).JIRA_TOKEN }}
        JIRA_PROD_URL: "https://sonarsource.atlassian.net/"
        JIRA_SANDBOX_URL: "https://sonarsource-sandbox-608.atlassian.net/"
      run: |
        PROJECT_KEY="${{ inputs.jira-project-key || env.JIRA_PROJECT_KEY }}"
        
        if [[ -z "$PROJECT_KEY" ]]; then
          echo "::error::Both jira-project-key input and JIRA_PROJECT_KEY environment variable are missing. One must be provided."
          exit 1
        fi

        python ${{ github.action_path }}/create_jira_version.py \
          --project-key="$PROJECT_KEY" \
          --version-name="${{ steps.determine-new-version-name.outputs.new-version-name }}" \
          --jira-url="${{ ((inputs.use-jira-sandbox || env.USE_JIRA_SANDBOX) == 'true') && env.JIRA_SANDBOX_URL || env.JIRA_PROD_URL }}" \
          >> $GITHUB_OUTPUT
