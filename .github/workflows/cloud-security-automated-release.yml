name: Automate release

env:
  JIRA_PROJECT_KEY: ${{ inputs.jira-project-key }}
  USE_JIRA_SANDBOX: ${{ inputs.use-jira-sandbox }}

on:
  workflow_call:
    inputs:
      jira-project-key:
        description: "Jira project key"
        required: true
        type: string
      project-name:
        description: "Project name"
        required: true
        type: string
      plugin-name:
        description: "Plugin name"
        required: true
        type: string
      plugin-artifacts-sqs:
        description: "SQS Plugin artifacts"
        required: true
        type: string
      plugin-artifacts-sqc:
        description: "SQC Plugin artifacts"
        required: true
        type: string
      use-jira-sandbox:
        description: "Use Jira sandbox"
        required: false
        type: boolean
        default: true
      is-draft-release:
        description: "Create draft release"
        required: false
        type: boolean
        default: true
      pm-email:
        description: "Product manager email"
        required: true
        type: string
      release-automation-secret-name:
        description: "Release automation secret name"
        required: true
        type: string
      short-description:
        description: "A brief summary of what the release contains"
        required: true
        type: string
      rule-props-changed:
        description: "Did any rule properties change in this release"
        required: true
        type: string
      sq-compatibility:
        description: "SonarQube compatibility"
        required: true
        type: string
      branch:
        description: "Branch from which to do the release"
        required: true
        type: string
        default: "master"
      release-notes:
        description: "Release notes"
        required: true
        type: string
      new-version:
        description: "New version to release"
        required: false
        type: string
    outputs:
      new-version:
        description: "New version to release"
        value: ${{ jobs.release-in-jira.outputs.new-version }}

jobs:
  pre-release-checks:
    name: Pre-release checks
    runs-on: ubuntu-latest
    permissions:
      statuses: read
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: Check Releasability Status
        uses: SonarSource/release-github-actions/check-releasability-status@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
        with:
          branch: ${{ inputs.branch }}
          with-optional-checks: false

      - name: Update Rule Metadata
        id: update-rule-metadata
        uses: SonarSource/release-github-actions/update-rule-metadata@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0

      - name: Check Rule Metadata Changes
        if: steps.update-rule-metadata.outputs.has-changes == 'true'
        run: |
          echo "::error::Rule metadata changes detected. The generated PR needs to be merged first before continuing with the release."
          echo "::error::Pull Request URL: ${{ steps.update-rule-metadata.outputs.pull-request-url }}"
          echo "::error::Please merge the PR and restart this workflow."
          exit 1

  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: pre-release-checks
    permissions:
      statuses: read
      contents: read
      id-token: write
    outputs:
      release-version: ${{ steps.get-release-version.outputs.release-version }}
      jira-version-name: ${{ steps.get-jira-version.outputs.jira-version-name }}
      release-notes: ${{ inputs.release-notes != '' && inputs.release-notes || steps.get-jira-release-notes.outputs.release-notes }}
      jira-release-notes: ${{ inputs.release-notes != '' && inputs.release-notes || steps.get-jira-release-notes.outputs.jira-release-notes }}
      jira-release-url: ${{ steps.get-jira-release-notes.outputs.jira-release-url }}
    steps:
      - name: Get Release Version
        id: get-release-version
        uses: SonarSource/release-github-actions/get-release-version@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
        with:
          branch: ${{ inputs.branch }}

      - name: Get Jira Version
        id: get-jira-version
        uses: SonarSource/release-github-actions/get-jira-version@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0

      - name: Get Jira Release Notes
        id: get-jira-release-notes
        if: inputs.release-notes == ''
        uses: SonarSource/release-github-actions/get-jira-release-notes@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0

  create-release-ticket:
    name: Create release ticket
    runs-on: ubuntu-latest
    needs: prepare-release
    permissions:
      statuses: read
      contents: read
      id-token: write
    outputs:
      release-ticket-key: ${{ steps.create-ticket.outputs.release-ticket-key }}
      release-ticket-url: ${{ steps.create-ticket.outputs.release-ticket-url }}
    steps:
      - name: Create Jira Release Ticket
        id: create-ticket
        uses: SonarSource/release-github-actions/create-jira-release-ticket@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
        with:
          project-name: ${{ inputs.project-name }}
          short-description: ${{ inputs.short-description }}
          sq-compatibility: ${{ inputs.sq-compatibility }}
          rule-props-changed: ${{ inputs.rule-props-changed }}
          jira-release-url: ${{ needs.prepare-release.outputs.jira-release-url }}
          start-progress: true
          version: ${{ needs.prepare-release.outputs.release-version }}

  publish-github-release:
    name: Publish github release
    runs-on: ubuntu-latest
    needs: [ prepare-release, create-release-ticket ]
    permissions:
      id-token: write
      contents: write
      actions: write
    outputs:
      github-release-url: ${{ steps.publish-github-release.outputs.release-url}}
    steps:
      - name: Publish GitHub Release
        id: publish-github-release
        uses: SonarSource/release-github-actions/publish-github-release@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
        with:
          release-version: ${{ needs.prepare-release.outputs.release-version }}
          release-notes: ${{ inputs.release-notes != '' && inputs.release-notes || needs.prepare-release.outputs.release-notes }}
          draft: ${{ inputs.is-draft-release }}
          branch: ${{ inputs.branch }}

  release-in-jira:
    name: Release in Jira
    runs-on: ubuntu-latest
    needs: [ prepare-release, publish-github-release, create-release-ticket ]
    permissions:
      statuses: read
      contents: read
      id-token: write
    outputs:
      new-version: ${{ steps.create-jira-version.outputs.jira-version-name }}
      sqc-ticket-key: ${{ steps.create-sc-ticket.outputs.ticket-key }}
      sqc-ticket-url: ${{ steps.create-sc-ticket.outputs.ticket-url }}
      sqs-ticket-key: ${{ steps.create-sonar-ticket.outputs.ticket-key }}
      sqs-ticket-url: ${{ steps.create-sonar-ticket.outputs.ticket-url }}
    steps:
      - name: Release in Jira
        uses: SonarSource/release-github-actions/release-jira-version@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
        with:
          jira-version-name: ${{ needs.prepare-release.outputs.jira-version-name }}

      - name: Create new release in jira
        id: create-jira-version
        uses: SonarSource/release-github-actions/create-jira-version@934cb16fa3d59bdccb6dcccadbabc68d8fadfc17
        with:
          jira-version-name: ${{ inputs.new-version }}

      - name: Move release ticket to done
        uses: SonarSource/release-github-actions/update-release-ticket-status@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          status: "Technical Release Done"
          assignee: ${{ inputs.pm-email }}

      - name: Create SLVSCODE Ticket
        uses: SonarSource/release-github-actions/create-integration-ticket@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          plugin-name: ${{ inputs.plugin-name }}
          release-version: ${{ needs.prepare-release.release-version }}
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          target-jira-project: "SLVSCODE"
          ticket-description: ${{ needs.prepare-release.outputs.jira-release-notes }}

      - name: Create SLE Ticket
        uses: SonarSource/release-github-actions/create-integration-ticket@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          plugin-name: ${{ inputs.plugin-name }}
          release-version: ${{ needs.prepare-release.release-version }}
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          target-jira-project: "SLE"
          ticket-description: ${{ needs.prepare-release.outputs.jira-release-notes }}

      - name: Create SLI Ticket
        uses: SonarSource/release-github-actions/create-integration-ticket@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          plugin-name: ${{ inputs.plugin-name }}
          release-version: ${{ needs.prepare-release.release-version }}
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          target-jira-project: "SLI"
          ticket-description: ${{ needs.prepare-release.outputs.jira-release-notes }}

      - name: Create SC Ticket
        id: create-sc-ticket
        uses: SonarSource/release-github-actions/create-integration-ticket@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          plugin-name: ${{ inputs.plugin-name }}
          release-version: ${{ needs.prepare-release.release-version }}
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          target-jira-project: "SC"
          ticket-description: ${{ needs.prepare-release.outputs.jira-release-notes }}

      - name: Create SONAR Ticket
        id: create-sonar-ticket
        uses: SonarSource/release-github-actions/create-integration-ticket@9b1c9f8f9a3ba07708451bcc30f68e120e80fad0
        with:
          plugin-name: ${{ inputs.plugin-name }}
          release-version: ${{ needs.prepare-release.release-version }}
          release-ticket-key: ${{ needs.create-release-ticket.outputs.release-ticket-key }}
          target-jira-project: "SONAR"
          ticket-description: ${{ needs.prepare-release.outputs.jira-release-notes }}

#  update-analyzers:
#    name: Update Analyzers in SQS and SQC
#    runs-on: ubuntu-latest
#    needs: [ prepare-release, release-in-jira ]
#    permissions:
#      id-token: write
#    outputs:
#      sqs-pull-request-url: ${{ steps.update-sqs.outputs.pull-request-url }}
#      sqc-pull-request-url: ${{ steps.update-sqc.outputs.pull-request-url }}
#    steps:
#      - name: Update analyzer in SQS
#        id: update-sqs
#        uses: SonarSource/release-github-actions/update-analyzer@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
#        with:
#          release-version: ${{ needs.prepare-release.outputs.release-version }}
#          ticket-key: ${{ needs.release-in-jira.outputs.sqs-ticket-key }}
#          plugin-name: ${{ inputs.plugin-name }}
#          secret-name: ${{ inputs.release-automation-secret-name }}
#          plugin-artifacts: ${{inputs.plugin-artifacts-sqs }}
#          draft: ${{ inputs.is-draft-release }}
#          reviewers: ${{ github.actor }}
#
#      - name: Update analyzer in SQC
#        id: update-sqc
#        uses: SonarSource/release-github-actions/update-analyzer@1a912fb37cba099b4b8ce46f3460e64eaf1f2fe0
#        with:
#          release-version: ${{ needs.prepare-release.outputs.release-version }}
#          ticket-key: ${{ needs.release-in-jira.outputs.sqc-ticket-key }}
#          plugin-name: ${{ inputs.plugin-name }}
#          secret-name: ${{ inputs.release-automation-secret-name }}
#          plugin-artifacts: ${{inputs.plugin-artifacts-sqc }}
#          draft: ${{ inputs.is-draft-release }}
#          reviewers: ${{ github.actor }}

  summarize_release:
    name: Release
    runs-on: ubuntu-latest
    if: always()
    needs: [ pre-release-checks, prepare-release, publish-github-release, create-release-ticket, release-in-jira ]
    steps:
      - name: Post Summary to Workflow
        run: |
          ALL_SUCCESS=$([[ "${{ needs.pre-release-checks.result }}" == "success" && \
                          "${{ needs.prepare-release.result }}" == "success" && \
                          "${{ needs.publish-github-release.result }}" == "success" && \
                          "${{ needs.create-release-ticket.result }}" == "success" && \
                          "${{ needs.release-in-jira.result }}" == "success" && \
                          "${{ needs.update-analyzers.result }}" == "success" ]] && echo "true" || echo "false")
          
          if [[ "$ALL_SUCCESS" == "true" ]]; then
            echo "### 🎉🚀 Congratulations! Release Successful! 🚀🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Summary of the release:**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌💥 Release Failed! 💥❌" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Summary of the failed release:**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Released Version:** ${{ needs.prepare-release.outputs.release-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** ${{ needs.release-in-jira.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Jira Release URL:** ${{ needs.prepare-release.outputs.jira-release-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Ticket URL:** ${{ needs.create-release-ticket.outputs.release-ticket-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release URL:** ${{ needs.publish-github-release.outputs.github-release-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SQS Integration Ticket URL:** ${{ needs.release-in-jira.outputs.sqs-ticket-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SQC Integration Ticket URL:** ${{ needs.release-in-jira.outputs.sqc-ticket-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SQS Analyzer PR URL:** ${{ needs.update-analyzers.outputs.sqs-pull-request-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SQC Analyzer PR URL:** ${{ needs.update-analyzers.outputs.sqc-pull-request-url }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$ALL_SUCCESS" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "PS: Don't forget to review and merge the bump version, SQS and SQC PRs!" >> $GITHUB_STEP_SUMMARY
          fi
