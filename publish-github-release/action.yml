name: 'Publish GitHub Release'
description: 'Publishes a GitHub Release.'
author: 'SonarSource'

inputs:
  github-token:
    description: 'The GitHub token for API calls.'
    required: true
    default: ${{ github.token }}
  release-version:
    description: 'The version number for the new release (e.g., v1.0.0). This will also be the tag name. If not provided, uses RELEASE_VERSION environment variable.'
    required: false
  branch:
    description: 'The branch, commit, or tag to create the release from.'
    required: false
    default: 'master'
  release-notes:
    description: 'The full markdown content for the release notes.'
    required: false
  draft:
    description: 'A boolean value to indicate if the release should be a draft. Defaults to true.'
    required: false
    default: 'true'
  release-workflow:
    description: 'The filename of the release workflow to trigger in the caller repository.'
    required: false
    default: 'release.yml'

outputs:
  release-url:
    description: 'The URL of the newly created release.'
    value: ${{ steps.create-release.outputs.release-url }}

runs:
  using: "composite"
  steps:
    - name: Check out repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Validate Version Input
      shell: bash
      run: |
        VERSION="${{ inputs.release-version || env.RELEASE_VERSION }}"
        if [[ -z "$VERSION" ]]; then
          echo "::error::Both release-version input and RELEASE_VERSION environment variable are missing. One must be provided."
          exit 1
        fi
        echo "VALIDATED_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Prepare Release Notes
      shell: bash
      run: |
        if [[ -n "${RELEASE_NOTES}" ]]; then
          echo "${RELEASE_NOTES}" > release-notes.md
        else
          echo "" > release-notes.md
        fi
      env:
        RELEASE_NOTES: ${{ inputs.release-notes }}

    - name: Create Release with GitHub CLI
      id: create-release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if a release with the same title already exists
        EXPECTED_TITLE="$VALIDATED_VERSION"
        EXISTING_RELEASE=$(gh api repos/${{ github.repository }}/releases --jq ".[] | select(.name == \"$EXPECTED_TITLE\")" || echo "")

        if [[ -n "$EXISTING_RELEASE" ]]; then
          EXISTING_DRAFT=$(echo "$EXISTING_RELEASE" | jq -r '.draft')
          EXISTING_TAG=$(echo "$EXISTING_RELEASE" | jq -r '.tag_name')
          EXISTING_URL=$(echo "$EXISTING_RELEASE" | jq -r '.html_url')
          EXISTING_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
          
          if [[ "${{ inputs.draft }}" == "true" ]]; then
            # If draft=true and release exists, log warning and do nothing
            echo "::warning::A release with title '$EXPECTED_TITLE' already exists. Skipping creation since draft=true."
            echo "release-url=${EXISTING_URL}" >> $GITHUB_OUTPUT
            echo "release-id=${EXISTING_ID}" >> $GITHUB_OUTPUT
            exit 0
          else
            if [[ "$EXISTING_DRAFT" == "true" ]]; then
            # If draft=false and existing release is a draft, publish it
              echo "Found existing draft release with title '$EXPECTED_TITLE'. Publishing it instead of creating a new one."
              UPDATED_URL=$(gh release edit "$EXISTING_TAG" --draft=false)
              echo "release-url=${UPDATED_URL}" >> $GITHUB_OUTPUT
              echo "release-id=${EXISTING_ID}" >> $GITHUB_OUTPUT
              exit 0
            else
              # If draft=false and existing release is already published, this is an error
              echo "::error::A published release with title '$EXPECTED_TITLE' already exists. Cannot create or publish another release with the same title."
              exit 1
            fi
          fi
        fi

        # No existing release found, proceed with normal creation
        DRAFT_FLAG=""
        if [[ "${{ inputs.draft }}" == "true" ]]; then
          DRAFT_FLAG="--draft"
        fi

        # Build the gh release create command
        NOTES_FLAG=""
        if [[ -n "${{ inputs.release-notes }}" ]]; then
          NOTES_FLAG="--notes-file release-notes.md"
        fi

        RELEASE_URL=$(gh release create "$VALIDATED_VERSION" \
          --target "${{ inputs.branch }}" \
          --title "$VALIDATED_VERSION" \
          $NOTES_FLAG \
          $DRAFT_FLAG)

        echo "release-url=${RELEASE_URL}" >> $GITHUB_OUTPUT

        # Get the release ID only for published releases
        if [[ "${{ inputs.draft }}" != "true" ]]; then
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$VALIDATED_VERSION --jq '.id')
          echo "release-id=${RELEASE_ID}" >> $GITHUB_OUTPUT
        fi

    - name: Trigger Release Workflow
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REF: ${{ inputs.branch }}
      run: |
        # Set release ID based on draft status
        if [[ "${{ inputs.draft }}" == "true" ]]; then
          RELEASE_ID_VALUE="N/A"
        else
          RELEASE_ID_VALUE="${{ steps.create-release.outputs.release-id }}"
        fi
        
        echo "Triggering release workflow '${{ inputs.release-workflow }}' with tag '$VALIDATED_VERSION', release ID '$RELEASE_ID_VALUE', and dryRun=${{ inputs.draft }}..."
        
        # Trigger the workflow
        gh workflow run "${{ inputs.release-workflow }}" \
          --repo "${{ github.repository }}" \
          --ref $GITHUB_REF \
          -f "version=$VALIDATED_VERSION" \
          -f "releaseId=$RELEASE_ID_VALUE" \
          -f "dryRun=${{ inputs.draft }}"
        
        echo "Workflow triggered successfully"
        
        # Wait a moment for the workflow to start, then get the run ID
        sleep 30
        
        RUN_ID=$(gh run list \
          --repo "${{ github.repository }}" \
          --workflow "${{ inputs.release-workflow }}" \
          --limit 1 \
          --created ">=$(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%SZ)" \
          --json databaseId \
          --jq '.[0].databaseId')
        
        if [[ -z "$RUN_ID" ]] || [[ "$RUN_ID" == "null" ]]; then
          echo "::error::Failed to get workflow run ID"
          exit 1
        fi
        
        echo "Monitoring workflow run ID: $RUN_ID"
        
        # Wait for the workflow to complete
        while true; do
          RUN_STATUS=$(gh run view "$RUN_ID" \
            --repo "${{ github.repository }}" \
            --json status,conclusion \
            --jq '{status: .status, conclusion: .conclusion}')
          
          STATUS=$(echo "$RUN_STATUS" | jq -r '.status')
          CONCLUSION=$(echo "$RUN_STATUS" | jq -r '.conclusion')
          
          echo "Workflow status: $STATUS, conclusion: $CONCLUSION"
          
          if [[ "$STATUS" == "completed" ]]; then
            if [[ "$CONCLUSION" == "success" ]]; then
              echo "✅ Release workflow completed successfully!"
              break
            else
              echo "::error::❌ Release workflow failed with conclusion: $CONCLUSION"
              gh run view "$RUN_ID" --repo "${{ github.repository }}" --log-failed
              exit 1
            fi
          elif [[ "$STATUS" == "cancelled" ]] || [[ "$STATUS" == "failure" ]]; then
            echo "::error::❌ Release workflow was cancelled or failed"
            gh run view "$RUN_ID" --repo "${{ github.repository }}" --log-failed
            exit 1
          fi
          
          # Wait 15 seconds before checking again
          sleep 15
        done
