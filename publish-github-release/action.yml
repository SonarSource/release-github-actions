name: 'Publish GitHub Release'
description: 'Publishes a GitHub Release with release notes that are provided directly or fetched from Jira.'
author: 'SonarSource'

inputs:
  version:
    description: 'The version number for the new release (e.g., v1.0.0). This will also be the tag name.'
    required: true
  branch:
    description: 'The branch, commit, or tag to create the release from.'
    required: false
    default: 'master'
  draft:
    description: 'A boolean value to indicate if the release should be a draft. Defaults to true.'
    required: false
    default: 'true'
  release_notes:
    description: 'The full markdown content for the release notes. If provided, this is used directly.'
    required: false
    default: ''
  jira_release_name:
    description: 'The name of the Jira release version. If provided and release_notes is empty, notes will be fetched from Jira.'
    required: false
    default: ''
  jira_project_key:
    description: 'The Jira project key (e.g., "SONARPHP") to fetch notes from.'
    required: false
  jira_user:
    description: 'Jira user for authentication.'
    required: false
  jira_token:
    description: 'Jira API token for authentication.'
    required: false
  issue_types:
    description: 'Optional comma-separated list of Jira issue types to include in the release notes, in order.'
    required: false
    default: ''
  use_sandbox:
    description: "Use the sandbox Jira server instead of production."
    required: false
    default: 'true'
  github_token:
    description: 'The GitHub token for API calls.'
    required: true
    default: ${{ github.token }}
  release_workflow_filename:
    description: 'The filename of the release workflow to trigger in the caller repository.'
    required: false
    default: 'release.yml'

outputs:
  release_url:
    description: 'The URL of the newly created release.'
    value: ${{ steps.create_release.outputs.release_url }}
  release_id:
    description: 'The ID of the newly created release.'
    value: ${{ steps.create_release.outputs.release_id }}

runs:
  using: "composite"
  steps:
    - name: Check out repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Validate Inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.release_notes }}" && -z "${{ inputs.jira_release_name }}" ]]; then
          echo "Error: You must provide either the 'release_notes' or the 'jira_release_name' input."
          exit 1
        fi
        if [[ -n "${{ inputs.jira_release_name }}" && ( -z "${{ inputs.jira_project_key }}" || -z "${{ inputs.jira_user }}" || -z "${{ inputs.jira_token }}" ) ]]; then
          echo "Error: When using 'jira_release_name', you must also provide 'jira_project_key', 'jira_user', and 'jira_token'."
          exit 1
        fi

    - name: Prepare Release Notes
      id: prepare_notes
      shell: bash
      run: |
        # Case 1: Direct release_notes are provided.
        if [[ -n "${{ inputs.release_notes }}" ]]; then
          echo "Using provided release_notes."
          echo "${{ inputs.release_notes }}" > release-notes.md
          exit 0
        fi

        # Case 2: Fetch notes from Jira.
        if [[ -n "${{ inputs.jira_release_name }}" ]]; then
          echo "Fetching release notes from Jira for version: ${{ inputs.jira_release_name }}"

          # Setup Python environment
          echo "Setting up Python..."
          python -m venv .venv
          source .venv/bin/activate
          pip install -r ${{ github.action_path }}/requirements.txt
          echo "Python setup complete."

          SANDBOX_FLAG=""
          if [[ "${{ inputs.use_sandbox }}" == "true" ]]; then
            SANDBOX_FLAG="--use-sandbox"
          fi

          python ${{ github.action_path }}/fetch_jira_release_notes.py \
            --project-key "${{ inputs.jira_project_key }}" \
            --release-name "${{ inputs.jira_release_name }}" \
            --issue-types "${{ inputs.issue_types }}" \
            $SANDBOX_FLAG > release-notes.md

          echo "Successfully fetched notes from Jira."
          exit 0
        fi
      env:
        JIRA_USER: ${{ inputs.jira_user }}
        JIRA_TOKEN: ${{ inputs.jira_token }}

    - name: Create Release with GitHub CLI
      id: create_release
      shell: bash
      run: |
        echo "${{ inputs.github_token }}" | gh auth login --with-token

        # Check if a release with the same title already exists
        EXPECTED_TITLE="${{ inputs.version }}"
        EXISTING_RELEASE=$(gh api repos/${{ github.repository }}/releases --jq ".[] | select(.name == \"$EXPECTED_TITLE\")" || echo "")

        if [[ -n "$EXISTING_RELEASE" ]]; then
          EXISTING_DRAFT=$(echo "$EXISTING_RELEASE" | jq -r '.draft')
          EXISTING_TAG=$(echo "$EXISTING_RELEASE" | jq -r '.tag_name')
          EXISTING_URL=$(echo "$EXISTING_RELEASE" | jq -r '.html_url')
          EXISTING_ID=$(echo "$EXISTING_RELEASE" | jq -r '.id')
          
          if [[ "${{ inputs.draft }}" == "true" ]]; then
            # If draft=true and release exists, log warning and do nothing
            echo "::warning::A release with title '$EXPECTED_TITLE' already exists. Skipping creation since draft=true."
            echo "release_url=${EXISTING_URL}" >> $GITHUB_OUTPUT
            echo "release_id=${EXISTING_ID}" >> $GITHUB_OUTPUT
            exit 0
          else
            # If draft=false and existing release is a draft, publish it
            if [[ "$EXISTING_DRAFT" == "true" ]]; then
              echo "Found existing draft release with title '$EXPECTED_TITLE'. Publishing it instead of creating a new one."
              gh release edit "$EXISTING_TAG" --draft=false
              echo "release_url=${EXISTING_URL}" >> $GITHUB_OUTPUT
              echo "release_id=${EXISTING_ID}" >> $GITHUB_OUTPUT
              exit 0
            else
              # If draft=false and existing release is already published, this is an error
              echo "::error::A published release with title '$EXPECTED_TITLE' already exists. Cannot create or publish another release with the same title."
              exit 1
            fi
          fi
        fi

        # No existing release found, proceed with normal creation
        DRAFT_FLAG=""
        if [[ "${{ inputs.draft }}" == "true" ]]; then
          DRAFT_FLAG="--draft"
        fi

        RELEASE_URL=$(gh release create "${{ inputs.version }}" \
          --target "${{ inputs.branch }}" \
          --title "${{ inputs.version }}" \
          --notes-file "release-notes.md" \
          $DRAFT_FLAG)

        echo "release_url=${RELEASE_URL}" >> $GITHUB_OUTPUT

        # Get the release ID only for published releases
        if [[ "${{ inputs.draft }}" != "true" ]]; then
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ inputs.version }} --jq '.id')
          echo "release_id=${RELEASE_ID}" >> $GITHUB_OUTPUT
        fi

    - name: Trigger Release Workflow
      shell: bash
      run: |
        echo "${{ inputs.github_token }}" | gh auth login --with-token
        
        echo "Triggering release workflow '${{ inputs.release_workflow_filename }}' with tag '${{ inputs.version }}', release ID '${{ steps.create_release.outputs.release_id }}', and dryRun=${{ inputs.draft }}..."
        
        # Trigger the workflow and get the run ID from the returned URL
        WORKFLOW_RUN_URL=$(gh workflow run "${{ inputs.release_workflow_filename }}" \
          --repo "${{ github.repository }}" \
          --ref "publish_draft_version" \
          -f "releaseTagName=${{ inputs.version }}" \
          -f "releaseId=${{ steps.create_release.outputs.release_id }}" \
          -f "dryRun=${{ inputs.draft }}")
        
        echo "Workflow triggered successfully: $WORKFLOW_RUN_URL"
        
        # Extract run ID from the URL (format: https://github.com/owner/repo/actions/runs/123456789)
        RUN_ID=$(echo "$WORKFLOW_RUN_URL" | sed 's/.*\/runs\///')
        
        if [[ -z "$RUN_ID" ]]; then
          echo "::error::Failed to get workflow run ID"
          exit 1
        fi
        
        echo "Monitoring workflow run ID: $RUN_ID"
        
        # Wait for the workflow to complete
        while true; do
          RUN_STATUS=$(gh run view "$RUN_ID" \
            --repo "${{ github.repository }}" \
            --json status,conclusion \
            --jq '{status: .status, conclusion: .conclusion}')
          
          STATUS=$(echo "$RUN_STATUS" | jq -r '.status')
          CONCLUSION=$(echo "$RUN_STATUS" | jq -r '.conclusion')
          
          echo "Workflow status: $STATUS, conclusion: $CONCLUSION"
          
          if [[ "$STATUS" == "completed" ]]; then
            if [[ "$CONCLUSION" == "success" ]]; then
              echo "✅ Release workflow completed successfully!"
              break
            else
              echo "::error::❌ Release workflow failed with conclusion: $CONCLUSION"
              gh run view "$RUN_ID" --repo "${{ github.repository }}" --log-failed
              exit 1
            fi
          elif [[ "$STATUS" == "cancelled" ]] || [[ "$STATUS" == "failure" ]]; then
            echo "::error::❌ Release workflow was cancelled or failed"
            gh run view "$RUN_ID" --repo "${{ github.repository }}" --log-failed
            exit 1
          fi
          
          # Wait 15 seconds before checking again
          sleep 15
        done
